version: '3.8'

services:
  grafana:
    image: grafana/grafana:latest
    container_name: weather-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=password123
      - GF_INSTALL_PLUGINS=operato-windrose-panel,frser-sqlite-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_ANONYMOUS_HIDE_VERSION=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SECURITY_LOGIN_REMEMBER_DAYS=7
      - GF_SESSION_PROVIDER=memory
      - GF_SESSION_COOKIE_SECURE=false
      - GF_SESSION_COOKIE_NAME=grafana_sess
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_DISABLE_SIGNOUT_MENU=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      - GF_AUTH_LOGIN_MAXIMUM_INACTIVE_LIFETIME_DURATION=7d
      - GF_AUTH_LOGIN_MAXIMUM_LIFETIME_DURATION=30d
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_SECURITY_ADMIN_USER=admin
      - TZ=UTC
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - weather_data:/var/lib/grafana/sqlite
    depends_on:
      - weather-monitor
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 384M
        reservations:
          memory: 192M

  weather-monitor:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: weather-monitor
    environment:
      - DATABASE_TYPE=sqlite
      - SQLITE_DB_PATH=/app/data/weather_data.db
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - WEATHER_STATION_ID=${WEATHER_STATION_ID}
      - LOG_LEVEL=INFO
      - DATA_RETENTION_DAYS=30
      - TZ=UTC
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
      - ./config:/app/config
      - weather_data:/app/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 192M
        reservations:
          memory: 96M

  radar-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: weather-radar-api
    command: ["python", "-m", "weather_monitor.cli", "radar-api", "--host", "0.0.0.0", "--port", "5000"]
    ports:
      - "5000:5000"
    environment:
      - DATABASE_TYPE=sqlite
      - SQLITE_DB_PATH=/app/data/weather_data.db
      - LOG_LEVEL=INFO
      - TZ=UTC
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
      - weather_data:/app/data
    depends_on:
      - weather-monitor
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  admin-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: weather-admin-api
    command: ["python", "-m", "weather_monitor.cli", "admin-api", "--host", "0.0.0.0", "--port", "5001"]
    ports:
      - "5001:5001"
    environment:
      - DATABASE_TYPE=sqlite
      - SQLITE_DB_PATH=/app/data/weather_data.db
      - LOG_LEVEL=INFO
      - ADMIN_API_KEY=${ADMIN_API_KEY:-admin123}
      - TZ=UTC
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
      - ./config:/app/config
      - weather_data:/app/data
    depends_on:
      - weather-monitor
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  radar-collector:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: weather-radar-collector
    command: ["python", "-m", "weather_monitor.cli", "radar-collect"]
    environment:
      - DATABASE_TYPE=sqlite
      - SQLITE_DB_PATH=/app/data/weather_data.db
      - LOG_LEVEL=INFO
      - TZ=UTC
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
      - weather_data:/app/data
    depends_on:
      - weather-monitor
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  nginx:
    image: nginx:alpine
    container_name: weather-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/kiosk.html:/usr/share/nginx/html/kiosk.html
      - ./nginx/radar.html:/usr/share/nginx/html/radar.html
      - ./nginx/stations-map.html:/usr/share/nginx/html/stations-map.html
      - ./nginx/stations-simple.html:/usr/share/nginx/html/stations-simple.html
    depends_on:
      - grafana
    restart: unless-stopped

  # VM Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    network_mode: host

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M


volumes:
  weather_data:
  grafana_data:
  prometheus_data: